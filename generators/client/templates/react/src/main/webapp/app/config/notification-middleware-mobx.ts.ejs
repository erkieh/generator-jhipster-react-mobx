<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

<%_ if (enableTranslation) { _%>
import { translate } from 'react-jhipster';
<%_ } _%>
import { toast, ToastContent } from 'react-toastify';

const addErrorAlert = (message, key?, data?) => {
  <%_ if (enableTranslation) { _%>
  key = key ? key : message;
  toast.error(translate(key, data));
  <%_ } else { _%>
  toast.error(message);
  <%_ } _%>
};

export const responseSuccess = (response, message?: ToastContent) => {
  if (message) {
    toast.success(message);
  } else if (response && response.headers) {
    const headers = response.headers;
    let alert: string  | null= null;
    <%_ if (enableTranslation) { _%>
    let alertParams: string | null = null;
    <%_ } _%>
    headers && Object.entries<string>(headers).forEach(([k, v]) => {
      if (k.toLowerCase().endsWith('app-alert')) {
        alert = v;
      }<% if (enableTranslation) { %> else if (k.toLowerCase().endsWith('app-params')) {
        alertParams = decodeURIComponent(v.replace(/\+/g, ' '));
      }<% } %>
    });
    if (alert) {
      <%_ if (enableTranslation) { _%>
      const alertParam = alertParams;
      toast.success(translate(alert, { param: alertParam }));
      <%_ } else { _%>
      toast.success(alert);
      <%_ } _%>
    }
  }
};

export const responseFailure =(error, message?: ToastContent) => {
  if (message) {
    toast.error(message);
  } else if (error && error.response) {
    const response = error.response;
    const data = response.data;
    if (!(response.status === 401 && (error.message === '' || (data.path.includes('/api/account') || data.path.includes('/api/authenticate'))))) {
      let i;
      switch (response.status) {
        // connection refused, server not reachable
        case 0:
          addErrorAlert('Server not reachable', 'error.server.not.reachable');
          break;

        case 400: {
            let errorHeader: string | null = null;
            let entityKey: string | null = null;
            response?.headers &&
              Object.entries<string>(response.headers).forEach(([k, v]) => {
            if (k.toLowerCase().endsWith('app-error')) {
              errorHeader = v;
            } else if (k.toLowerCase().endsWith('app-params')) {
              entityKey = v;
            }
          });
          if (errorHeader) {
            const entityName = <% if (enableTranslation) { %>translate(
              'global.menu.entities.' + entityKey
            )<% } else { %>entityKey<% } %>;
            addErrorAlert(errorHeader, errorHeader, { entityName });
            } else if (data?.fieldErrors) {
            const fieldErrors = data.fieldErrors;
            for (i = 0; i < fieldErrors.length; i++) {
              const fieldError = fieldErrors[i];
              if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {
                  fieldError.message = 'Size';
              }
              // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it
              const convertedField = fieldError.field.replace(/\[\d*\]/g, '[]');
              const fieldName = <% if (enableTranslation) { %>translate(
                  `<%= frontendAppName %>.${fieldError.objectName}.${convertedField}`
              )<% } else { %>convertedField.charAt(0).toUpperCase() + convertedField.slice(1)<% } %>;
              addErrorAlert(`Error on field "${fieldName}"`, `error.${fieldError.message}`, { fieldName });
            }
        } else if (typeof data === 'string' && data !== '') {
              addErrorAlert(data);
            } else if (data && data.message) {
              addErrorAlert(data.message, data.message, data.params);
          } else {
              toast.error(data?.message || data?.error || data?.title || 'Unknown error!');
          }
          break;
        }
        case 404:
          addErrorAlert('Not found', 'error.url.not.found');
          break;

        default:
            if (typeof data === 'string' && data !== '') {
              addErrorAlert(data);
          } else {
              toast.error(data?.message || data?.error || data?.title || 'Unknown error!');
          }
      }
    }
    } else if (error.config && error.config.url === 'api/account' && error.config.method === 'get') {
      /* eslint-disable no-console */
      console.log('Authentication Error: Trying to access url api/account with GET.');
    } else if (error && error.message) {
      toast.error(error.message);
    } else {
      toast.error('Unknown error!');
}
};
